{"ast":null,"code":"import _regeneratorRuntime from \"/home/uwabis/myProject/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/uwabis/myProject/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/uwabis/myProject/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/home/uwabis/myProject/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/uwabis/myProject/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/home/uwabis/myProject/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/uwabis/myProject/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/uwabis/myProject/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Navbar from './Navbar';\nimport Web3 from 'web3';\nimport Tether from '../truffle_abis/Tether.json';\nimport RWD from '../truffle_abis/RWD.json';\nimport DecentralBank from '../truffle_abis/DecentralBank.json';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert('Non ethereum browser detected. You should consider Metamask!');\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var web3, account, networkId, tetherData, tether, tetherBalance, rwdData, rwd, rwdBalance, decentralBankData, decentralBank, stakingBalance;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                //const web3 = new Web3(window.ethereum) \n                web3 = window.web3;\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                account = _context3.sent;\n                this.setState({\n                  account: account[0]\n                });\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                //load Tether Contract\n                tetherData = Tether.networks[networkId];\n\n                if (!tetherData) {\n                  _context3.next = 19;\n                  break;\n                }\n\n                tether = new web3.eth.Contract(Tether.abi, tetherData.address);\n                this.setState({\n                  tether: tether\n                });\n                _context3.next = 14;\n                return tether.methods.balanceOf(this.state.account).call();\n\n              case 14:\n                tetherBalance = _context3.sent;\n                this.setState({\n                  tetherBalance: tetherBalance.toString()\n                });\n                console.log({\n                  balance: tetherBalance\n                });\n                _context3.next = 20;\n                break;\n\n              case 19:\n                window.alert('Error! Tether Contract not deployed- no detected network');\n\n              case 20:\n                //load RWD Contract\n                rwdData = RWD.networks[networkId];\n\n                if (!rwdData) {\n                  _context3.next = 31;\n                  break;\n                }\n\n                rwd = new web3.eth.Contract(RWD.abi, rwdData.address);\n                this.setState({\n                  rwd: rwd\n                });\n                _context3.next = 26;\n                return rwd.methods.balanceOf(this.state.account).call();\n\n              case 26:\n                rwdBalance = _context3.sent;\n                this.setState({\n                  rwdBalance: rwdBalance.toString()\n                });\n                console.log({\n                  balance: rwdBalance\n                });\n                _context3.next = 32;\n                break;\n\n              case 31:\n                window.alert('Error! Reward Token Contract not deployed- no detected network');\n\n              case 32:\n                //load DecentralBank Contract\n                decentralBankData = DecentralBank.networks[networkId];\n\n                if (!decentralBankData) {\n                  _context3.next = 43;\n                  break;\n                }\n\n                decentralBank = new web3.eth.Contract(DecentralBankData.abi, decentralBankData.address);\n                this.setState({\n                  decentralBank: decentralBank\n                });\n                _context3.next = 38;\n                return decentralBank.methods.stakingBalance(this.state.account).call();\n\n              case 38:\n                stakingBalance = _context3.sent;\n                this.setState({\n                  stakingBalance: stakingBalance.toString()\n                });\n                console.log({\n                  balance: stakingBalance\n                });\n                _context3.next = 44;\n                break;\n\n              case 43:\n                window.alert('Error! Decentral Bank Contract not deployed- no detected network');\n\n              case 44:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      account: '0x0',\n      tether: {},\n      rwd: {},\n      decentralBank: {},\n      tetherBalance: '0',\n      rwdBalance: '0',\n      stakingBalance: '0',\n      loading: true\n    };\n    return _this;\n  } //our React Code goes in here!\n\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 1\n        }\n      }, /*#__PURE__*/React.createElement(Navbar, {\n        account: this.state.account,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 1\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 1\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 1\n        }\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/uwabis/myProject/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js"],"names":["React","Component","Navbar","Web3","Tether","RWD","DecentralBank","App","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","account","setState","net","getId","networkId","tetherData","networks","tether","Contract","abi","address","methods","balanceOf","state","call","tetherBalance","toString","console","log","balance","rwdData","rwd","rwdBalance","decentralBankData","decentralBank","DecentralBankData","stakingBalance","props","loading"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport './App.css'\nimport Navbar from './Navbar'; \nimport Web3 from 'web3';\nimport Tether from '../truffle_abis/Tether.json'\nimport RWD from '../truffle_abis/RWD.json'\nimport DecentralBank from '../truffle_abis/DecentralBank.json'\n\n\nclass App extends Component {\n\nasync componentWillMount(){\nawait this.loadWeb3()\nawait this.loadBlockchainData()\n\n}\n\nasync loadWeb3() {\nif(window.ethereum) {\nwindow.web3 = new Web3(window.ethereum)\nawait window.ethereum.enable()\n}else if (window.web3) {\nwindow.web3 = new Web3(window.web3.currentProvider)\n} else {\nwindow.alert('Non ethereum browser detected. You should consider Metamask!')\n}\n}\n\nasync loadBlockchainData() {\n    //const web3 = new Web3(window.ethereum) \n    const web3 = window.web3 \n    const account = await web3.eth.getAccounts()\n    this.setState({account: account[0]})\n    const networkId = await web3.eth.net.getId()\n   \n    //load Tether Contract\n    const tetherData = Tether.networks[networkId]\n    if (tetherData) {\n        const tether = new web3.eth.Contract(Tether.abi, tetherData.address)\n        this.setState({tether})\n        let tetherBalance = await tether.methods.balanceOf(this.state.account).call()\n        this.setState({tetherBalance: tetherBalance.toString() })\n        console.log({balance: tetherBalance})\n    }else {\n        window.alert('Error! Tether Contract not deployed- no detected network')\n    }\n\n    //load RWD Contract\n    const rwdData = RWD.networks[networkId]\n    if (rwdData) {\n        const rwd = new web3.eth.Contract(RWD.abi, rwdData.address)\n        this.setState({rwd})\n        let rwdBalance = await rwd.methods.balanceOf(this.state.account).call()\n        this.setState({rwdBalance: rwdBalance.toString() })\n        console.log({balance: rwdBalance})\n    }else {\n        window.alert('Error! Reward Token Contract not deployed- no detected network')\n    }\n\n    //load DecentralBank Contract\n    const decentralBankData = DecentralBank.networks[networkId]\n    if (decentralBankData) {\n        const decentralBank = new web3.eth.Contract(DecentralBankData.abi, decentralBankData.address)\n        this.setState({decentralBank})\n        let stakingBalance = await decentralBank.methods.stakingBalance(this.state.account).call()\n        this.setState({stakingBalance: stakingBalance.toString() })\n        console.log({balance: stakingBalance})\n    }else {\n        window.alert('Error! Decentral Bank Contract not deployed- no detected network')\n    }\n}\n\nconstructor(props) {\n    super(props)\n    this.state = {\n        account: '0x0',\n        tether: {}, \n        rwd: {}, \n        decentralBank: {}, \n        tetherBalance: '0', \n        rwdBalance: '0', \n        stakingBalance: '0', \n        loading: true\n    }\n}\n\n//our React Code goes in here!\nrender() {\nreturn (\n<div>\n<Navbar account={this.state.account}/>\n<div className='text-center'>\n<h1></h1>\n</div>\n\n</div>\n)\n}\n}\n\nexport default App; \n\n"]},"metadata":{},"sourceType":"module"}